CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    // zx
    Mux16(a=x, b[0..15]=false, sel=zx, out=x1);

    // nx
    Not16(in=x1 , out=notx );
    Mux16(a=x1, b=notx , sel=nx , out=x2);
    
    // zy
    Mux16(a=y, b[0..15]=false, sel=zy, out=y1);

    // ny
    Not16(in=y1 , out=noty );
    Mux16(a=y1, b=noty , sel=ny , out=y2);

    // x+y
    Add16(a = x2, b = y2, out = xplusy);

    // x&y
    And16(a= x2, b= y2, out= xandy);

    // f
    Mux16(a= xandy, b=xplusy , sel=f , out= outf);

    // !outf
    Not16(in=outf , out=noutf );

    // zr, ng
    Mux16(a=outf, b=noutf , sel=no , out[0..7]=out0t7, out[8..15]=out8t15, out[15]=ng, out=out);

    Or8Way(in=out0t7, out=z0t7);
    Or8Way(in=out0t7, out=z8t15);
    Or(a=z0t7 , b=z8t15 , out=nzr );
    Not(in=nzr , out=zr );
}